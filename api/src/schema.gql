# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Interest {
  id: Float!
  context: String!
  user: User!
}

type Certification {
  id: Float!
  name: String!
  user: User!
}

type Specie {
  id: ID!
  name: String!
  monsters: [Monster!]!
}

type Monster {
  id: ID!
  name: String!
  type: Float!
  story: String!
  specie: Specie!
  projects: [Project!]!
}

type Invitation {
  id: ID!
  user: User!
  project: Project!
  created_at: DateTime!
  deleted_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ListSort {
  id: ID!
  task_list: Float!
  list: List!
}

type Chat {
  id: ID!
  comment: String!
  task: Task!
  user: User!
  created_at: DateTime!
  updated_at: DateTime!
  deleted_at: DateTime!
}

type Allocation {
  id: ID!
  user: User!
  task: Task!
  created_at: DateTime!
  deleted_at: DateTime!
}

type Task {
  id: ID!
  title: String!
  overview: String!
  technology: Float!
  achievement: Float!
  solution: Float!
  motivation: Float!
  plan: Float!
  design: Float!
  vertical_sort: Float!
  end_date: String!
  completed_flg: Boolean!
  project: Project!
  list: List!
  chats: [Chat!]!
  chatCount: Float!
  allocations: [Allocation!]!
  created_at: DateTime!
  updated_at: DateTime!
  deleted_at: DateTime!
}

type List {
  id: ID!
  list_id: String!
  name: String!
  project: Project!
  listSorts: [ListSort!]!
  tasks: [Task!]!
}

type GameLog {
  id: ID!
  context: String!
  user: User!
  project: Project!
  created_at: DateTime!
}

type Project {
  id: ID!
  name: String!
  overview: String!
  hp: Float!
  difficulty: Float!
  end_date: DateTime!
  project_end_flg: Boolean!
  monster: Monster!
  groups: [Group!]!
  invitations: [Invitation!]!
  lists: [List!]!
  tasks: [Task!]!
  gameLogs: [GameLog!]!
  created_at: DateTime!
  updated_at: DateTime!
  deleted_at: DateTime!
}

type Group {
  id: ID!
  authority_flg: Boolean!
  user: User!
  project: Project!
  created_at: DateTime!
  updated_at: DateTime!
  deleted_at: DateTime!
}

type Occupation {
  id: ID!
  name: String!
  users: [User!]!
}

type User {
  id: ID!
  name: String!
  icon_image: String!
  online_flg: Boolean!
  hp: Float!
  mp: Float!
  company: String!
  memo: String!
  technology: Float!
  achievement: Float!
  motivation: Float!
  solution: Float!
  plan: Float!
  design: Float!
  exp: Float!
  certifications: [Certification!]!
  interests: [Interest!]!
  groups: [Group!]!
  invitations: [Invitation!]!
  allocations: [Allocation!]!
  gameLogs: [GameLog!]!
  chat: [Chat!]!
  occupation: Occupation!
  created_at: DateTime!
  updated_at: DateTime!
  deleted_at: DateTime!
}

type Company {
  uid: String!
  name: String!
}

type UpdatedTask {
  id: ID!
  project_id: String!
  high_status_name: String!
  is_completed: Boolean!
}

type Query {
  allUsers: [User!]!
  user(id: String!): User!
  findHrUsers(company: String!): [User!]!
  findProjectDetailSameCompanyUsers(searchUser: ProjectDetailUserSearchInput!): [User!]!
  certifications(user_ids: [String!]!): [Certification!]!
  allInterests: [Interest!]!
  interestsByUserIds(user_ids: [String!]!): [Interest!]!
  getCompany(uid: String!): Company!
  getOccupations: [Occupation!]!
  getProjectById(id: String!): Project!
  invitation(projectId: String!, userId: String!): Invitation!
  invitations(userId: String!): [Invitation!]!
  listsByProjectId(projectId: String!): [List!]!
  completedTask(userId: String!): [Allocation!]!
  getChats(taskId: Float!): [Chat!]!
  findLogsByProjectId(project_id: String!): [GameLog!]!
}

input ProjectDetailUserSearchInput {
  project_id: String!
  input: String!
  company: String!
}

type Mutation {
  addUser(newCertification: NewCertificationClientInput!, newInterest: NewInterestClientInput!, newUser: NewUserInput!): User!
  searchSameCompanyUsers(conditionSearchUser: SearchUserInput!): [User!]!
  updateOnlineFlag(isOnline: Boolean!, project_id: String!, id: String!): User!
  updateMemo(memo: String!, id: String!): User!
  updateUserName(name: String!, id: String!): User!
  updateUserIconImage(icon_image: String!, id: String!): User!
  addCertification(newCertification: NewCertificationInput!): Certification!
  updateCertifications(names: [String!]!, user_id: String!): [Certification!]!
  addInterest(newInterest: NewInterestInput!): Interest!
  updateInterests(contexts: [String!]!, user_id: String!): [Interest!]!
  addCompany(newCompany: NewCompanyInput!): Company!
  creteOccupation(name: String!): Occupation!
  createProject(selectUser: SelectUser!, newProject: NewProjectInput!): Project!
  completedProject(endProject: EndProjectInput!): Boolean!
  updateProject(updateProject: UpdateProjectInput!, projectId: String!): Project!
  deleteProject(userId: String!, projectId: String!): User!
  joinProject(projectId: String!, userId: String!, invitationId: String!): Group!
  createInvitation(projectId: String!, userId: String!): Invitation!
  createList(newList: NewListInput!): [List!]!
  updateListName(updateList: UpdateListInput!): [List!]!
  removeList(removeList: RemoveListInput): Boolean!
  updateListSort(updateListSort: UpdateListSort!): Boolean!
  updateTaskSort(updateTask: UpdateTaskSort!): UpdatedTask!
  addTask(assignTask: AssignTaskInput!, newTask: NewTaskInput!): [List!]!
  updateTaskTitle(taskId: Float!, title: String!): [List!]!
  updateTaskOverview(taskId: Float!, overview: String!): [List!]!
  updateTaskParameters(taskId: Float!, design: Float!, plan: Float!, motivation: Float!, solution: Float!, achievement: Float!, technology: Float!): [List!]!
  updateTaskEndDate(taskId: Float!, end_date: String!): [List!]!
  deleteTask(taskId: Float!): [List!]!
  createAllocation(newAllocation: NewAllocationInput!): [List!]!
  unAssignTask(task_id: Float!, user_id: String!): [List!]!
  addChat(userId: String!, taskId: Float!, comment: String!): [Chat!]!
  updateChat(taskId: Float!, comment: String!, chatId: Float!): [Chat!]!
  deleteChat(taskId: Float!, chatId: Float!): [Chat!]!
  createGameLog(newLog: NewLogInput!): GameLog!
}

input NewCertificationClientInput {
  name: [String!]!
}

input NewInterestClientInput {
  context: [String!]!
}

input NewUserInput {
  id: String!
  name: String!
  icon_image: String!
  online_flg: Boolean!
  hp: Float!
  mp: Float!
  occupation_id: Float!
  company: String!
  memo: String!
  technology: Float!
  achievement: Float!
  motivation: Float!
  solution: Float!
  plan: Float!
  design: Float!
  exp: Float!
}

input SearchUserInput {
  ids: [String!]!
  name: String!
  company: String!
}

input NewCertificationInput {
  name: String!
  user_id: String!
}

input NewInterestInput {
  context: String!
  user_id: String!
}

input NewCompanyInput {
  uid: String!
  name: String!
}

input SelectUser {
  ids: [String!]!
}

input NewProjectInput {
  name: String!
  overview: String!
  hp: Float!
  difficulty: Float!
  end_date: String!
  project_end_flg: Boolean!
}

input EndProjectInput {
  project_id: String!
  user_id: String!
}

input UpdateProjectInput {
  name: String!
  overview: String!
  difficulty: Float!
  end_date: String!
}

input NewListInput {
  name: String!
  project_id: String!
  task_list: Float!
  user_id: String!
}

input UpdateListInput {
  name: String!
  list_id: String!
}

input RemoveListInput {
  id: Float!
  project_id: String!
}

input UpdateListSort {
  listSort: [UpdateListSortObject!]!
}

input UpdateListSortObject {
  id: String!
  task_list: Float!
}

input UpdateTaskSort {
  tasks: [UpdateTask!]!
  project_id: String!
  user_id: String!
}

input UpdateTask {
  id: String!
  vertical_sort: Float!
  list_id: String!
  completed_flg: Boolean!
}

input AssignTaskInput {
  users: [AssignUserInput!]!
}

input AssignUserInput {
  user_id: String!
}

input NewTaskInput {
  title: String!
  user_id: String!
  overview: String!
  technology: Float!
  achievement: Float!
  solution: Float!
  motivation: Float!
  plan: Float!
  design: Float!
  vertical_sort: Float!
  end_date: String!
  project_id: String!
  list_id: String!
  completed_flg: Boolean!
}

input NewAllocationInput {
  user_id: String!
  task_id: String!
}

input NewLogInput {
  context: String!
  user_id: String!
  project_id: String!
}

type Subscription {
  userAdded: User!
  updateLogsByOnline(projectId: String!): [GameLog!]!
  updateGroupsByOnline(projectId: String!): [Group!]!
  updateUserData(userId: String!): User!
  updateUserDataByCertification(userId: String!): User!
  updateUserDataByInterest(userId: String!): User!
  projectCreate(userId: String!): User!
  newInvitationByCreateProject(userId: String!): [Invitation!]!
  newInvitation(userId: String!): [Invitation!]!
  updateListByList(projectId: String!): [List!]!
  updateListByListSort(projectId: String!): [List!]!
  updateList(projectId: String!): [List!]!
  endTask(projectId: String!): UpdatedTask!
  updateLogsByTask(projectId: String!): [GameLog!]!
  updateUserByTask(userId: String!): User!
  updateGroupsByTask(projectId: String!): [Group!]!
  updateChatSubscription(taskId: String!, projectId: String!): [Chat!]!
  updateListByChat(projectId: String!): [List!]!
}
